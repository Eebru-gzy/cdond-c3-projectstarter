version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      to:
        default: "all"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
              input=<<parameters.to>>
              if [ $input == FE ]   
              then
                aws s3 rm s3://udapeople-bit1212 --recursive
                aws cloudformation delete-stack \
                --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
              elif [ $input == backend ] 
              then
                aws cloudformation delete-stack \
                  --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
              else 
                aws s3 rm s3://udapeople-bit1212 --recursive
                aws cloudformation delete-stack \
                --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
                aws cloudformation delete-stack \
                --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} 
              fi

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    # parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: b09b1107-93bd-4c55-97a1-62fd3ac64973" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run lint
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run lint
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      # Checkout code from git
      - restore_cache:
          keys: [frontend-build]
      # Restore from cache
      - run:  
          name: Test front-end
          command: |
            cd frontend
            sudo apt install nodejs
            npm i
            npm run test
           
      # Your job code here
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      # Checkout code from git
      - restore_cache:
          keys: [backend-build]
      # Restore from cache
      - run:  
          name: Test back-end
          command: |
            cd backend
            sudo apt install nodejs
            npm i
            npm run test
            # Your code here
      # Your job code here
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      # Checkout code from git
      - restore_cache:
          keys: [frontend-build]
      # Restore from cache
      - run:  
          name: Scan front-end
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force
      # Your job code here

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here
    steps:
      - checkout
      # Checkout code from git
      - restore_cache:
          keys: [backend-build]
      # Restore from cache
      - run:  
          name: Scan back-end
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
      # Your job code here
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
      # Docker image here that supports AWS CLI
    steps:
      - checkout
      # Checkout code from git
      - run:
          name: Install gzip tar
          command: |
                yum -y install tar
                yum -y install gzip
            
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacity-backend \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacity-frontend \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"\
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udacity-backend" \
              --output text >> backend_url.txt
              curl -H "Content-Type: text/plain" -H "token: b09b1107-93bd-4c55-97a1-62fd3ac64973" --request PUT --data $(cat backend_url.txt) https://api.memstash.io/values/backend
              curl -H "token: b09b1107-93bd-4c55-97a1-62fd3ac64973" --request GET https://api.memstash.io/values/backend >> .circleci/ansible/inventory.txt
                   
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt    
      - destroy-environment 

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
      # Docker image here that supports Ansible
    steps:
      - checkout
      # Checkout code from git
      - add_ssh_keys:
          fingerprints: ["96:e9:9c:7c:4c:f2:78:86:cc:25:f3:aa:0a:33:5d:52"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
           pip install --upgrade pip
           pip install awscli
           apk add ansible
      - run:
          name: Cat inventory
          command: |
            cd .circleci/ansible/
            cat inventory.txt
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible/
            ansible-playbook configure-server.yml -i inventory.txt
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0 # Docker image here that supports NodeJS
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Prepare Run migrations
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"

            cd backend
            npm install
            npm run build
      - run:
          name: Run Migration
          command: |
            cd backend
            npm run migrations > migrations_dump
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            ls -l migrations_dump
            echo "______________________________________________________________"
            # cat migrations_dump | grep "has been executed successfully" > file.txt
            cat migration_dump
            
            
      - revert-migrations
      - destroy-environment

# if (( echo $VAL=="has been executed successfully" ))  
#             then
#                 echo "Yes this works >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
#                 curl -H "Content-Type: text/plain" -H "token:  b09b1107-93bd-4c55-97a1-62fd3ac64973" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
#             else
#                 curl -H "Content-Type: text/plain" -H "token:  b09b1107-93bd-4c55-97a1-62fd3ac64973" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
#             fi

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
      # Docker image here that supports AWS CLI
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
              sudo apt-get update && sudo apt-get install -yy less
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
                  
      - run:
          name: Deploy frontend objects 
          command: |
              URL=$(curl -H "token: b09b1107-93bd-4c55-97a1-62fd3ac64973" --request GET https://api.memstash.io/values/backend)
              export API_URL="http://${URL}:3030" 
              curl -H "Content-Type: text/plain" -H "token: b09b1107-93bd-4c55-97a1-62fd3ac64973" --request PUT --data ${API_URL} https://api.memstash.io/values/backendurl    
              cd frontend
              echo NODE_ENV=production >> ".env"
              echo API_URL=$API_URL >> ".env"
              npx browserslist@latest --update-db
              npm install
              npm run build
              aws s3 cp ./dist/ s3://udapeople-bit1212/ --recursive 
      - destroy-environment:
          to: "FE"
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      - run-migrations
          # requires: [scan-frontend, scan-backend]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]